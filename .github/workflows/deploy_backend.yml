name: Deploy Backend to AWS Elastic Beanstalk

on:
  push:
    branches:
      - main
    paths:
      - 'devdash/backend/**'
      - '.github/workflows/deploy_backend.yml'
  
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Generate deployment package
        run: |
          mkdir -p deploy/
          
          # Flatten the structure to simplify paths
          cp -r devdash/backend/* deploy/
          
          # Create missing directories if needed
          mkdir -p deploy/.ebextensions
          mkdir -p deploy/.platform/hooks/postdeploy
          
          # Create a simplified environment.config without VPC settings
          cat > deploy/.ebextensions/01_environment.config << 'EOF'
          option_settings:
            aws:elasticbeanstalk:application:environment:
              ENVIRONMENT: production
              DEBUG: false
              PYTHONPATH: /var/app
            
            aws:elasticbeanstalk:environment:
              ServiceRole: aws-elasticbeanstalk-service-role
              LoadBalancerType: application
            
            aws:elasticbeanstalk:healthreporting:system:
              SystemType: enhanced

            # Set Python version explicitly
            aws:elasticbeanstalk:container:python:
              WSGIPath: application:application
              NumProcesses: 3
              NumThreads: 20
          EOF
          
          # Copy other .ebextensions files but skip the environment config
          if [ -d "devdash/.ebextensions" ]; then
            for file in devdash/.ebextensions/*.config; do
              if [ "$(basename "$file")" != "01_environment.config" ]; then
                cp "$file" deploy/.ebextensions/
              fi
            done
          fi
          
          # Copy .platform files if they exist
          if [ -d "devdash/.platform" ]; then
            cp -r devdash/.platform/* deploy/.platform/
          fi
          
          # Check requirements.txt for psycopg2-binary
          if ! grep -q "psycopg2-binary" deploy/requirements.txt; then
            echo "# Adding missing PostgreSQL driver" >> deploy/requirements.txt
            echo "psycopg2-binary==2.9.9" >> deploy/requirements.txt
          fi
          
          # Add enhanced debug script
          cat > deploy/.platform/hooks/postdeploy/01_debug.sh << 'EOF'
          #!/bin/bash

          # Capture enhanced debugging information
          LOG_FILE="/var/log/deploy-debug.log"

          echo "===================== DEPLOYMENT DEBUG LOG =====================" > $LOG_FILE
          echo "Date/Time: $(date)" >> $LOG_FILE
          echo "" >> $LOG_FILE

          echo "===================== ENVIRONMENT VARIABLES =====================" >> $LOG_FILE
          env | grep -v KEY | grep -v SECRET | sort >> $LOG_FILE
          echo "" >> $LOG_FILE

          echo "===================== PYTHON VERSION =====================" >> $LOG_FILE
          python --version >> $LOG_FILE 2>&1
          pip --version >> $LOG_FILE 2>&1
          echo "" >> $LOG_FILE

          echo "===================== DIRECTORY STRUCTURE =====================" >> $LOG_FILE
          echo "Files in /var/app:" >> $LOG_FILE
          find /var/app -type f -name "*.py" | sort >> $LOG_FILE
          echo "" >> $LOG_FILE

          echo "===================== PYTHON PACKAGES =====================" >> $LOG_FILE
          pip list >> $LOG_FILE 2>&1
          echo "" >> $LOG_FILE

          echo "===================== DEPLOYMENT LOGS =====================" >> $LOG_FILE
          echo "Last 50 lines of eb-engine.log:" >> $LOG_FILE
          tail -n 50 /var/log/eb-engine.log >> $LOG_FILE 2>&1
          echo "" >> $LOG_FILE

          echo "Last 50 lines of eb-activity.log:" >> $LOG_FILE
          tail -n 50 /var/log/eb-activity.log >> $LOG_FILE 2>&1

          # Make log readable
          chmod 644 $LOG_FILE
          EOF
          
          chmod +x deploy/.platform/hooks/postdeploy/01_debug.sh
          
          # Fix the Elastic Beanstalk application.py file if it contains CONTENT_LENGTH error
          if [ -f "deploy/application.py" ]; then
            # Backup the original file
            cp deploy/application.py deploy/application.py.bak
            
            # Check for the known error pattern and fix it
            sed -i 's/request_body_size = int(environ\['\''CONTENT_LENGTH'\''\])/request_body_size = int(environ.get('\''CONTENT_LENGTH'\'', 0))/g' deploy/application.py
          fi
          
          # Zip the deployment package
          cd deploy
          zip -r ../deploy.zip .
          cd ..
        
      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: DevDashBackend
          environment_name: DevDashBackend-env
          version_label: backend-${{ github.sha }}
          region: ${{ secrets.AWS_REGION }}
          deployment_package: deploy.zip
          wait_for_deployment: true
          use_existing_version_if_available: true